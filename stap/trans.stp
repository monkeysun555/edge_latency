
# # 1st, when packet is received
global process = "swapper/5"
global client = "myserver.out"
global timearray, len_array, tag_array
global net_recv = 0
global ip_recv = 0
global tcp_recv = 0
global socket_send = 0
global tcp_send = 0
global ip_send = 0
global net_send = 0
global socket_recv = 0

probe begin{
	previous_p = gettimeofday_us()
	printf("Probing starts. Time is: %d.\n", previous_p)
}
global previous_p

probe netdev.receive {
	if (dev_name != "lo" && (length < 166 && length >= 100)) {
		# printf("Time: %d,    ->> Device %s received a packet with protocol %d, length is: %d.\n", gettimeofday_us(), dev_name, protocol, length)
		timearray["netdev_recv", net_recv] = gettimeofday_us()
		len_array["netdev_recv", net_recv] = length 
		tag_array["netdev_recv", net_recv] = dev_name 
		net_recv ++
	}
}

probe kernel.function("ip_rcv") {
	if ($dev->name && kernel_string($dev->name) != "lo"  && ($skb->len < 200 && $skb->len > 80)) {
		# printf("Time: %d,    ->> IP is received! Length is: %d, from %s, protocol: %d. exec: %s. \n", gettimeofday_us(),
		#	 $skb->len, kernel_string($dev->name), $skb->protocol, execname())
		timearray["ip_recv", ip_recv] = gettimeofday_us()
		len_array["ip_recv", ip_recv] = $skb->len
		tag_array["ip_recv", ip_recv] = kernel_string($dev->name)
		ip_recv ++
	}
}

probe tcp.receive {
	if (sport ==  11111 && dport == 8000) {
		# printf("Time: %d,    ->> TCP packet is received, source: %s, dst ip: %s, sport is: %d dport is: %d, len is: %d, exec: %s.\n",
		#   gettimeofday_us(), saddr, daddr, sport, dport, $skb->len, execname())
		# printf("Execname is: %s, pid: %d\n", execname(), pid())
		timearray["tcp_receive", tcp_recv] = gettimeofday_us()
		len_array["tcp_receive", tcp_recv] = $skb->len
		tag_array["tcp_receive", tcp_recv] = execname()
		tcp_recv ++
	}
}

// probe socket.recvmsg {
//  	if (execname() == client || execname() == process) {
//  		# printf("Time: %d,    ->> Socket receive data, and execname is: %s, len is: %d.\n", gettimeofday_us(), execname(), size)
//  		timearray["socket_recvmsg", socket_recvmsg] = gettimeofday_us()
//  		len_array["socket_recvmsg", socket_recvmsg] = size
//  		tag_array["socket_recvmsg", socket_recvmsg] = execname()
//  		socket_recvmsg ++
//  	}
// }

probe socket.receive {
	if (execname() == client || execname() == process) {
		# printf("Time: %d,    ->> Socket receive data, and execname is: %s.\n", gettimeofday_us(), execname())
		timearray["socket_recv", socket_recv] = gettimeofday_us()
		len_array["socket_recv", socket_recv] = size
		tag_array["socket_recv", socket_recv] = execname()
		socket_recv ++
	}
}

# ##### Application process
probe socket.sendmsg {
	if (execname() == client || execname() == process) {
		# printf("Time: %d,    <<- Socket send data. execname is: %s, len is: %d.\n", gettimeofday_us(), execname(), size)
		timearray["socket_send", socket_send] = gettimeofday_us()
		len_array["socket_send", socket_send] = size
		tag_array["socket_send", socket_send] = execname()
		socket_send ++
	}
}

probe tcp.sendmsg {
	if ((execname() == client || execname() == process) && $size != 32 ){
		# printf("Time: %d,    <<- TCP packet is send out, len is: %d, execname is: %s.\n", gettimeofday_us(), $size, execname())
		timearray["tcp_send", tcp_send] = gettimeofday_us()
		len_array["tcp_send", tcp_send] = $size 
		tag_array["tcp_send", tcp_send] = execname()
		tcp_send ++
	}
}

probe kernel.function("ip_output") {
	if ( execname() == client && $skb->len != 52) {
	# if ($skb->dev->name && kernel_string($skb->dev->name) != "lo" && (execname() == process || execname() == client) && $skb->len != 52) {
		# printf("Time: %d,    <<- IP is sendout!, length is: %d, from %s, execname: %s.\n", gettimeofday_us(), $skb->len, kernel_string($skb->dev->name), execname())
		timearray["ip_send", ip_send] = gettimeofday_us()
		len_array["ip_send", ip_send] = $skb->len
		tag_array["ip_send", ip_send] = execname()
		ip_send ++	
	}
}

probe netdev.transmit {
	if (protocol == 8 && dev_name != "lo" && (length < 166 && length >= 100)) {
		# printf("Time: %d,    <<- Device %s is sending (queued) a packet with protocol %d, length is %d\n", gettimeofday_us(), dev_name, protocol, length)
		timearray["net_send", net_send] = gettimeofday_us()
		# gap_array["socket_recvmsg", socket_recvmsg] = gettimeofday_us()- previous
		# previous = gettimeofday_us()
		len_array["net_send", net_send] = length
		tag_array["net_send", net_send] = dev_name
		net_send ++
	}
}

probe end{
	foreach ([attr, num] in timearray) {
		gap = timearray[attr, num] - previous_p
		printf("Time: %d    , time gap is: %10d, probe function is: %20s, tag is: %20s, packet length is: %5d. \n", timearray[attr,num], gap, 
			attr, tag_array[attr,num], len_array[attr, num])
		previous_p = timearray[attr, num]
	}
}